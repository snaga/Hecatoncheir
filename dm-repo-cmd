#!/usr/bin/env python2.7
# -*- coding: utf-8 -*-

import getopt
import json
import os
import re
import shutil
import sys

import sqlalchemy as sa

from hecatoncheir import db
from hecatoncheir import logger as log
from hecatoncheir.msgutil import gettext as _
from hecatoncheir.repository import Repository
from hecatoncheir.table import Table2

global repo2


def usage():
    print '''
Usage: %s [options...] [repo file | connetion string] [cmd] [args...]

Commands:
    init
    ls
    rm <db.schema.table>

Options:
    --help      Print this help.

''' % os.path.basename(sys.argv[0])

input_encoding = 'utf-8'


def cmd_init():
    try:
        repo2.create()
    except sa.exc.OperationalError as ex:
        log.error(ex)
        return False
    return True


def cmd_ls():
    try:
        for t in Table2.find():
            print('%s.%s.%s' % (t.database_name, t.schema_name, t.table_name))
    except Exception as ex:
        log.error(ex)
        return False
    return True


def cmd_rm(args):
    try:
        for a in args:
            tmp = a.split('.')
            if len(tmp) != 3:
                log.warning(_(u'Skipping `%s\'.') % a)
                continue
            t = Table2.find(tmp[0], tmp[1], tmp[2])
            if t:
                t.destroy()
            else:
                log.warning(_(u"Table `%s' not found.") % a)
    except Exception as ex:
        log.error(ex)
        return False
    return True

if __name__ == "__main__":
    try:
        opts, args = getopt.getopt(sys.argv[1:], "",
                                   ["help", "debug"])
    except getopt.GetoptError as err:
        log.error(unicode(err))
        usage()
        sys.exit(1)

    debug = False

    for o, a in opts:
        if o in ("--debug"):
            debug = True
        elif o in ("--help"):
            usage()
            sys.exit(0)
        else:
            log.error("unexpected option. internal error.")
            sys.exit(1)

    if len(args) < 2:
        log.error(_("Too few arguments."))
        usage()
        sys.exit(1)

    db.creds = db.parse_connection_string(args[0])
    db.connect()
    repo2 = Repository()

    args = [x.decode(input_encoding) for x in args]
    ret = False
    if args[1] == 'init':
        ret = cmd_init()
    elif args[1] == 'ls':
        ret = cmd_ls()
    elif args[1] == 'rm':
        ret = cmd_rm(args[2:])

    sys.exit(0 if ret else 1)
